name: Cross-compile

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest, target: 'x86_64-unknown-linux-gnu' }
          - { os: ubuntu-latest, target: 'x86_64-pc-windows-gnu' }
          - { os: ubuntu-latest, target: 'wasm32-unknown-unknown' }
          - { os: macos-latest, target: 'x86_64-apple-darwin' }
          - { os: windows-latest, target: 'x86_64-pc-windows-msvc' }
        include:
          - os: ubuntu-latest
            packages: libx11-dev libxi-dev libgl1-mesa-dev gcc-mingw-w64 libasound2-dev libssl-dev pkg-config

    steps:
      - uses: actions/checkout@v2
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -yq --no-install-suggests --no-install-recommends install ${{ matrix.packages }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.config.target }}
          override: true
      - name: Workaround MinGW issue # https://github.com/rust-lang/rust/issues/47048
        if: runner.os == 'Linux' && matrix.config.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo cp /usr/x86_64-w64-mingw32/lib/{*.a,*.o} ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib/
          echo "[target.x86_64-pc-windows-gnu]" >> ~/.cargo/config
          echo "linker = \"/usr/bin/x86_64-w64-mingw32-gcc\"" >> ~/.cargo/config
      - name: cargo build
        if: matrix.config.target == 'wasm32-unknown-unknown'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --bin rusty-aquarium --target=${{ matrix.config.target }}
      - name: cargo build
        if: matrix.config.target != 'wasm32-unknown-unknown'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features --all-targets --target=${{ matrix.config.target }}
